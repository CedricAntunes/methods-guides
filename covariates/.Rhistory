# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
rm(list=ls())
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
dev.off()
jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
#jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
#dev.off()
rm(list=ls())
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
#jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
dev.off()
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
png("cb.png", width = 700, height = 480, res=100, units="px")
