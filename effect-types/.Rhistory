1 Almost every social science experiment faces a multiple comparisons problem
1 Almost every social science experiment faces a multiple comparisons problem
1 Almost every social science experiment faces a multiple comparisons problem
Almost every social science experiment faces a multiple comparisons problem
---
Author: NA
title: 10 Things You Need to Know About Multiple Comparisons
output: pdf_document
---
Abstract
==
The “Multiple Comparisons Problem” is the problem  that standard statistical procedures can be misleading when researchers conduct a large group of hypothesis. When a research has multiple “bites at the apple,” the chances are that some finding will appear “significant” even when there’s nothing going on.
Classical hypothesis tests assess statistical significance by calculating the probability under a null hypothesis of obtaining estimates as large or larger as the observed estimate. When multiple tests are conducted, however, classical p-values are incorrect — they no longer reflect the true probability under the null.
This guide will help you guard against drawing false conclusions from your experiments. We focus on the big ideas and provide examples and tools that you can use in R.
==
The multiple comparisons problem is related to, but different from, the problem of “fishing”.  Fishing occurs when an unscrupulous analyst conducts many tests but only reports the “interesting” ones. In essence, fishing withholds the necessary information we would need in order to correct for multiple comparisons.
---
set.seed(1234) # For replication
n = 1000 # Population size
Y0 = runif(n) # Potential outcome under control condition
Y1= Y0
Y1[Y0 <.5] = Y0[Y0 <.5]-rnorm(length(Y0[Y0 <.5]))
Y1[Y0 >.5] = Y0[Y0 >.5]+rnorm(length(Y0[Y0 >.5]))
(1:n)
(1:n)%%2
sample((1:n)%%2)
D = sample((1:n)%%2) # Treatment: 1 if treated, 0 otherwise Y = D*Y1 + (1-D)*Y0 # Outcome in population
samp = data.frame(D,Y)
samp
samp = data.frame(D,Y)
Y = D*Y1 + (1-D)*Y0 # Outcome in population
samp = data.frame(D,Y)
samp
library(quantreg)
ATE = coef(lm(Y~D,data=samp))[2]
QTE = rq(Y~D,tau =
seq(.05,.95,length.out=10),data=samp,method = "fn")
plot(summary(QTE),parm=2,main="",ylab="QTE",xlab="Quan
tile",mar = c(5.1, 4.1, 2.1, 2.1))
install.packages("mediation")
