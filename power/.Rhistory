possible.ns <- seq(from=100, to=2000, by=50) # The sample sizes we'll be considering
powers <- rep(NA, length(possible.ns)) # Empty object to collect simulation estimates
alpha <- 0.05 # Standard significance level
sims <- 500 # Number of simulations to conduct for each N
#### Outer loop to vary the number of subjects ####
for (j in 1:length(possible.ns)){ N <- possible.ns[j] # Pick the jth value for N
significant.experiments <- rep(NA, sims) # Empty object to count significant experiments
#### Inner loop to conduct experiments "sims" times over for each N ####
for (i in 1:sims){
Y0 <- rnorm(n=N, mean=60, sd=20) # control potential outcome
tau <- 5 # Hypothesize treatment effect
Y1 <- Y0 + tau # treatment potential outcome
Z.sim <- rbinom(n=N, size=1, prob=.5) # Do a random assignment
Y.sim <- Y1*Z.sim + Y0*(1-Z.sim) # Reveal outcomes according to assignment
fit.sim <- lm(Y.sim ~ Z.sim) # Do analysis (Simple regression)
p.value <- summary(fit.sim)$coefficients[2,4] # Extract p-values
significant.experiments[i] <- (p.value <= alpha) # Determine significance according to p <= 0.05
powers[j] <- mean(significant.experiments) # store average success rate (power) for each N
}
powers
possible.ns <- seq(from=100, to=2000, by=50) # The sample sizes we'll be considering
powers <- rep(NA, length(possible.ns)) # Empty object to collect simulation estimates
alpha <- 0.05 # Standard significance level
sims <- 500 # Number of simulations to conduct for each N
#### Outer loop to vary the number of subjects ####
for (j in 1:length(possible.ns)){ N <- possible.ns[j] # Pick the jth value for N
significant.experiments <- rep(NA, sims) # Empty object to count significant experiments
#### Inner loop to conduct experiments "sims" times over for each N ####
for (i in 1:sims){
Y0 <- rnorm(n=N, mean=60, sd=20) # control potential outcome
tau <- 5 # Hypothesize treatment effect
Y1 <- Y0 + tau # treatment potential outcome
Z.sim <- rbinom(n=N, size=1, prob=.5) # Do a random assignment
Y.sim <- Y1*Z.sim + Y0*(1-Z.sim) # Reveal outcomes according to assignment
fit.sim <- lm(Y.sim ~ Z.sim) # Do analysis (Simple regression)
p.value <- summary(fit.sim)$coefficients[2,4] # Extract p-values
significant.experiments[i] <- (p.value <= alpha) # Determine significance according to p <= 0.05
}
powers[j] <- mean(significant.experiments) # store average success rate (power) for each N
}
powers
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round (ownsidcard+2*hasformalschooling+3*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
#assign treatment 10000 times
Z mat <- replicate(10000,ifelse(1:N %in% sample(1:N,1000),1,0))
#assign treatment 10000 times
Z_mat <- replicate(10000,ifelse(1:N %in% sample(1:N,1000),1,0))
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round (ownsidcard+2*hasformalschooling+3*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round(ownsidcard+2*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round(ownsidcard+2*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
#assign treatment 10000 times
Z_mat <- replicate(10000,ifelse(1:N %in% sample(1:N,1000),1,0))
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round(ownsidcard+2*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
#assign treatment 10000 times
Z_mat <- replicate(10000,ifelse(1:N %in% sample(1:N,1000),1,0))
#observe 10000 simulations of potential outcomes
indepchoice_mat <- indepchoiceY1*Z_mat+indepchoiceY0*(1-Z_mat)
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round(ownsidcard+2*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
#assign treatment 10000 times
Z_mat <- replicate(10000,ifelse(1:N %in% sample(1:N,1000),1,0))
#observe 10000 simulations of potential outcomes
indepchoice_mat <- indepchoiceY1*Z_mat+indepchoiceY0*(1-Z_mat)
#estimate ATE on indepchoice
ate <- function(Y,Z) summary(lm(Y~Z))$coef[2,1]
ate.covs <- function(Y,Z)
summary(lm(Y~Z+ownsidcard+age+TVaccess))$coef[2,1]
dist <- rep(NA, 10000)
dist.covs <- rep(NA, 10000)
for (i in 1:10000) {
dist[i] <- ate(indepchoice.mat[,i],Z_mat[,i])
dist.covs[i] <- ate.covs(indepchoice_mat[,i],Z_mat[,i])}
#look at bias and precision in our results
mean(dist) # unbiased!
mean(dist.covs) # unbiased!
sd(dist) # less precise
sd(dist.covs) #more precise
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round(ownsidcard+2*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
#assign treatment 10000 times
Z_mat <- replicate(10000,ifelse(1:N %in% sample(1:N,1000),1,0))
#observe 10000 simulations of potential outcomes
indepchoice_mat <- indepchoiceY1*Z_mat+indepchoiceY0*(1-Z_mat)
#estimate ATE on indepchoice
ate <- function(Y,Z) summary(lm(Y~Z))$coef[2,1]
ate.covs <- function(Y,Z)
summary(lm(Y~Z+ownsidcard+age+TVaccess))$coef[2,1]
dist <- rep(NA, 10000)
dist.covs <- rep(NA, 10000)
for (i in 1:10000) {
dist[i] <- ate(indepchoice.mat[,i],Z_mat[,i])
dist.covs[i] <- ate.covs(indepchoice_mat[,i],Z_mat[,i])}
#look at bias and precision in our results
mean(dist) # unbiased!
mean(dist.covs) # unbiased!
sd(dist) # less precise
sd(dist.covs) #more precise
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
hasformalschooling <- rbinom(n=N,size=1,prob=.6)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round(ownsidcard+2*hasformalschooling+3*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
#assign treatment 10000 times
Z_mat <- replicate(10000,ifelse(1:N %in% sample(1:N,1000),1,0))
#observe 10000 simulations of potential outcomes
indepchoice_mat <- indepchoiceY1*Z_mat+indepchoiceY0*(1-Z_mat)
#estimate ATE on indepchoice
ate <- function(Y,Z) summary(lm(Y~Z))$coef[2,1]
ate.covs <- function(Y,Z)
summary(lm(Y~Z+ownsidcard+hasformalschooling+age+TVaccess))$coef[2,1]
dist <- rep(NA, 10000)
dist.covs <- rep(NA, 10000)
for (i in 1:10000) {
dist[i] <- ate(indepchoice.mat[,i],Z_mat[,i])
dist.covs[i] <- ate.covs(indepchoice_mat[,i],Z_mat[,i])}
#look at bias and precision in our results
mean(dist) # unbiased!
mean(dist.covs) # unbiased!
sd(dist) # less precise
sd(dist.covs) #more precise
rm(list=ls())
set.seed(20140714)
N <- 2000
id <- seq(from=1,to=N)
# define pre-treatment covariates
ownsidcard <- rbinom(n=N,size=1,prob=.18)
hasformalschooling <- rbinom(n=N,size=1,prob=.6)
age <- round(rnorm(n=N, mean=37, sd=16))
age[age<18] <- 18
age[age>65] <- 65
TVaccess <- rbinom(n=N,size=1,prob=.7)
#define potential outcomes correlated with pre-treatment covariates
indepchoiceY0 <- round(ownsidcard+2*hasformalschooling+3*TVaccess+log(age))
indepchoiceY1 <- indepchoiceY0+1
#assign treatment 10000 times
Z_mat <- replicate(10000,ifelse(1:N %in% sample(1:N,1000),1,0))
#observe 10000 simulations of potential outcomes
indepchoice_mat <- indepchoiceY1*Z_mat+indepchoiceY0*(1-Z_mat)
#estimate ATE on indepchoice
ate <- function(Y,Z) summary(lm(Y~Z))$coef[2,1]
ate.covs <- function(Y,Z)
summary(lm(Y~Z+ownsidcard+hasformalschooling+age+TVaccess))$coef[2,1]
dist <- rep(NA, 10000)
dist.covs <- rep(NA, 10000)
for (i in 1:10000) {
dist[i] <- ate(indepchoice_mat[,i],Z_mat[,i])
dist.covs[i] <- ate.covs(indepchoice_mat[,i],Z_mat[,i])}
cb.jpg
rm(list=ls())
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
dev.off()
jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
#jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
plot(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
plot
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
#jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
jpg(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
# Define function to apply over treatment assignments ---------------------
ATE.est <- function(Z, X, Y0, Y1){
Y = Z*Y1 + (1-Z)*Y0
return(c(
covariate.corr = cor(X,Z),
uncond.ate = as.numeric(lm(Y ~ Z)$coefficients[2]),
cond.ate = as.numeric(lm(Y ~ Z + X)$coefficients[2]),
true.ate = mean(Y1-Y0)
))
}
# Start function ----------------------------------------------------------
cond.bias <- function(N=40,sims=8000,seed=1000){
set.seed(seed)
if(N%%2!=0)stop(print("Please enter an even number for N."))
# Generate ate on new data, same DGP  -----------------------------------------------------------
ate = function(i){
X  = runif(N)
Y0 = X+.14*rnorm(N)
Y1 = X+1+.14*rnorm(N)
Z  = sample(rep(0:1,N/2))
return(ATE.est(Z, X, Y0, Y1))
}
# Do many times ----------------------------------------------
out <- data.frame(t(sapply(1:sims, ate)))
return(out)
}
simulation = cond.bias()
jpeg("cb.jpg", width = 700, height = 480, res=100, units="px")
with(simulation,{
jpeg(x = covariate.corr,y = uncond.ate,col=rgb(0,0,1,.5),pch=16,cex=.5,
xlab = "Correlation between covariate and treatment",
ylab = "Estimated ATE | True ATE = 1")
abline(a=1, b=0)
points(x=covariate.corr,y = cond.ate,col=rgb(1,0,0,.5),pch=16,cex=.5)
rug(x = uncond.ate,side = 2,col = rgb(0,0,1,.05))
rug(x = cond.ate,side = 4,col = rgb(1,0,0,.05))
segments(min(covariate.corr)-.06,      quantile(uncond.ate, c(.025, .975)),min(covariate.corr), quantile(uncond.ate, c(.025, .975)), col = "blue")
segments(max(covariate.corr),      quantile(cond.ate, c(.025,  .975)),max(covariate.corr)+0.06,  quantile(cond.ate, c(.025, .975)), col = "red")
legend(.12, y=.8, c("Controlling for Covariate", "No controls"), col=c("red","blue"), pch = 19)
})
